version: "3.8"
services:

  guild:
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - "node.labels.region == ru"  # Запускаем только на RU сервере
    image: registry.sh1bari.ru/hack/guildservice:1.0.0
    ports:
      - "8080:8080"
    environment:
      - POSTGRES_ADDRESS=guildpostgres
      - POSTGRES_PORT=5432
      - POSTGRES_USERNAME=postgres
      - POSTGRES_PASSWORD=postgres
      - KAFKA_ENABLED=false
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - guildpostgres
    networks:
      - my-custom-network

  efs:
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - "node.labels.region == ru"  # Запускаем только на RU сервере
    image: registry.sh1bari.ru/hack/efs:1.0.0
    environment:
      - AUTH_SERVER_URL=http://auth:8080
      - AUTH_SERVER_TIMEOUT=3000
      - FUEL_SERVER_URL=http://guild:8080
      - FUEL_SERVER_TIMEOUT=3000
    networks:
      - traefik_network
      - my-custom-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.efs.rule=Host(`hack.noxly.ru`)"
      - "traefik.http.routers.efs.entrypoints=websecure"
      - "traefik.http.routers.efs.tls=true"
      - "traefik.http.routers.efs.tls.certresolver=myresolver"
      - "traefik.http.services.efs.loadbalancer.server.port=8081"
      - "traefik.http.routers.efs.priority=25"
      - "traefik.docker.network=traefik_network"

  socket:
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - "node.labels.region == ru"  # Запускаем только на RU сервере
    image: registry.sh1bari.ru/hack/socket:1.0.0
    ports:
      - "8082:8082"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    networks:
      - traefik_network
      - my-custom-network
    labels:
      - "traefik.enable=true"
      # ---------- WebSocket (апгрейд для /api/ws) ----------
      - "traefik.docker.network=traefik_network"
      - "traefik.http.routers.websocket.rule=Host(`ws.hack.noxly.ru`)"
      - "traefik.http.routers.websocket.entrypoints=websecure"
      - "traefik.http.routers.websocket.tls=true"
      - "traefik.http.routers.websocket.tls.certresolver=myresolver"
      - "traefik.http.services.websocket.loadbalancer.server.port=8082"
      - "traefik.http.routers.websocket.priority=30"

  auth:
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - "node.labels.region == ru"  # Запускаем только на RU сервере
    image: registry.sh1bari.ru/hack/auth:1.0.0
    environment:
      - POSTGRES_ADDRESS=authpostgres
      - POSTGRES_PORT=5432
      - POSTGRES_USERNAME=postgres
      - POSTGRES_PASSWORD=postgres
    depends_on:
      - authpostgres
    networks:
      - traefik_network
      - my-custom-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.authHack.rule=Host(`auth.noxly.ru`)"
      - "traefik.http.routers.authHack.entrypoints=websecure"
      - "traefik.http.routers.authHack.tls=true"
      - "traefik.http.routers.authHack.tls.certresolver=myresolver"
      - "traefik.http.services.authHack.loadbalancer.server.port=8083"
      - "traefik.http.routers.authHack.priority=21"
      - "traefik.docker.network=traefik_network"

  authpostgres:
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - "node.labels.region == ru"  # Запускаем только на RU сервере
    image: mirror.gcr.io/postgres:16.4-alpine
    networks:
      - my-custom-network
    restart: always
    environment:
      - POSTGRES_DB=auth
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - pg-data-auth:/var/lib/postgresql/data
    ports:
      - "127.0.0.1:5434:5432"

  guildpostgres:
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - "node.labels.region == ru"
    image: mirror.gcr.io/postgres:16.4-alpine
    networks:
      - my-custom-network
    restart: always
    environment:
      - POSTGRES_DB=guild-db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - pg-data-guild:/var/lib/postgresql/data
    ports:
      - "127.0.0.1:5435:5432"

  redis:
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - "node.labels.region == ru"  # Запускаем только на RU сервере
    image: redis:latest
    container_name: redis
    ports:
      - "127.0.0.1:6380:6379"
    networks:
      - my-custom-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - "node.labels.region == ru"  # Запускаем только на RU сервере
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_DATA_DIR: /var/lib/zookeeper/data
      ZOOKEEPER_DATALOG_DIR: /var/lib/zookeeper/datalog
    ports:
      - 22181:2181
    restart: always
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - my-custom-network


  kafka:
    image: confluentinc/cp-kafka:7.5.0
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - "node.labels.region == ru"  # Запускаем только на RU сервере
    depends_on:
      - zookeeper
    command: [ "sh", "-c", "sleep 10 && /etc/confluent/docker/run" ]
    ports:
      - 29092:29092
      - 29093:29093
    environment:
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://31.128.46.246:29092,PLAINTEXT_HOST://31.128.46.246:29093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_SEGMENT_BYTES: 104857600
      KAFKA_LOG_RETENTION_MS: 604800000
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_TRANSACTION_TIMEOUT_MS: 60000
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      KAFKA_CLUSTER_ID: "MLKBfFZqRly7mvJfciC2yg"
    restart: always
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - my-custom-network

volumes:
  pg-data-guild:
    driver: local
  kafka-data:
    driver: local
  zookeeper_data:
    driver: local
  zookeeper_logs:
    driver: local
  pg-data-auth:
    driver: local

networks:
  traefik_network:
    external: true
  my-custom-network:
    external: true